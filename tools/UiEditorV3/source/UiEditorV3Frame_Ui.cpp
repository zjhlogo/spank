/////////////////////////////////////////////////////////////////////////////
// Name:        UiEditorV3Frame_Ui.cpp
// Purpose:     
// Author:      zjhlogo
// Modified by: 
// Created:     18/01/2015 13:40:23
// RCS-ID:      
// Copyright:   zjhlogo (C) 2011-2012
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 18/01/2015 13:40:23

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "UiEditorV3Frame_Ui.h"

////@begin XPM images

#include "images/align_left.xpm"
#include "images/align_center.xpm"
#include "images/align_right.xpm"
#include "images/align_top.xpm"
#include "images/align_middle.xpm"
#include "images/align_bottom.xpm"
#include "images/gap_horizontal.xpm"
#include "images/gap_vertical.xpm"
#include "images/size_width.xpm"
#include "images/size_height.xpm"
#include "images/size_width_and_height.xpm"
#include "images/zoom_in.xpm"
#include "images/zoom_out.xpm"
#include "images/zoom_100.xpm"
////@end XPM images


/*
 * UiEditorV3Frame_Ui type definition
 */

IMPLEMENT_CLASS( UiEditorV3Frame_Ui, wxFrame )


/*
 * UiEditorV3Frame_Ui event table definition
 */

BEGIN_EVENT_TABLE( UiEditorV3Frame_Ui, wxFrame )

////@begin UiEditorV3Frame_Ui event table entries
////@end UiEditorV3Frame_Ui event table entries

END_EVENT_TABLE()


/*
 * UiEditorV3Frame_Ui constructors
 */

UiEditorV3Frame_Ui::UiEditorV3Frame_Ui()
{
	Init();
}

UiEditorV3Frame_Ui::UiEditorV3Frame_Ui( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
	Init();
	Create( parent, id, caption, pos, size, style );
}


/*
 * UiEditorV3Frame_Ui creator
 */

bool UiEditorV3Frame_Ui::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin UiEditorV3Frame_Ui creation
	wxFrame::Create( parent, id, caption, pos, size, style );

	CreateControls();
	Centre();
////@end UiEditorV3Frame_Ui creation
	return true;
}


/*
 * UiEditorV3Frame_Ui destructor
 */

UiEditorV3Frame_Ui::~UiEditorV3Frame_Ui()
{
////@begin UiEditorV3Frame_Ui destruction
	GetAuiManager().UnInit();
////@end UiEditorV3Frame_Ui destruction
}


/*
 * Member initialisation
 */

void UiEditorV3Frame_Ui::Init()
{
////@begin UiEditorV3Frame_Ui member initialisation
	m_editMenu = NULL;
	m_toolMenu = NULL;
	m_toolBar = NULL;
////@end UiEditorV3Frame_Ui member initialisation
}


/*
 * Control creation for UiEditorV3Frame_Ui
 */

void UiEditorV3Frame_Ui::CreateControls()
{    
////@begin UiEditorV3Frame_Ui content construction
	// Generated by DialogBlocks, 18/01/2015 13:40:23 (unregistered)

	UiEditorV3Frame_Ui* itemFrame1 = this;

	GetAuiManager().SetManagedWindow(this);

	wxMenuBar* menuBar = new wxMenuBar;
	wxMenu* itemMenu3 = new wxMenu;
	itemMenu3->Append(wxID_NEW, _("&New Project..."), wxEmptyString, wxITEM_NORMAL);
	itemMenu3->Enable(wxID_NEW, false);
	itemMenu3->Append(wxID_OPEN, _("&Open Project...\tCtrl+O"), wxEmptyString, wxITEM_NORMAL);
	itemMenu3->Append(wxID_SAVE, _("&Save Project...\tCtrl+S"), wxEmptyString, wxITEM_NORMAL);
	itemMenu3->Append(wxID_CLOSE, _("&Close Project"), wxEmptyString, wxITEM_NORMAL);
	itemMenu3->Enable(wxID_CLOSE, false);
	itemMenu3->AppendSeparator();
	itemMenu3->Append(wxID_EXIT, _("E&xit\tAlt+F4"), wxEmptyString, wxITEM_NORMAL);
	menuBar->Append(itemMenu3, _("&File"));
	m_editMenu = new wxMenu;
	m_editMenu->Append(wxID_UNDO, _("&Undo...\tCtrl+Z"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->Append(wxID_REDO, _("&Redo...\tCtrl+Y"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->AppendSeparator();
	m_editMenu->Append(wxID_COPY, _("&Copy\tCtrl+C"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->Append(wxID_PASTE, _("&Paste\tCtrl+V"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->Append(IDM_EDIT_REPLACE, _("&Replace\tCtrl+R"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->Append(wxID_DELETE, _("&Delete"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->AppendSeparator();
	m_editMenu->Append(IDM_EDIT_MAKE_BEST_SIZE, _("Make Best Size\tCtrl+B"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->AppendSeparator();
	wxMenu* itemMenu21 = new wxMenu;
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_LEFT, _("Left"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_left.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_CENTER, _("Center"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_center.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_RIGHT, _("Right"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_right.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_TOP, _("Top"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_top.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_MIDDLE, _("Middle"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_middle.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_BOTTOM, _("Bottom"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_bottom.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	itemMenu21->AppendSeparator();
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_GAP_HORIZONTAL, _("Average Gap Horizontal"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/gap_horizontal.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_GAP_VERTICAL, _("Average Gap Vertical"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/gap_vertical.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	itemMenu21->AppendSeparator();
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_SAME_WIDTH, _("Make Same Width"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/size_width.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_SAME_HEIGHT, _("Make Same Height"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/size_height.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu21, IDM_ALIGN_SAME_SIZE, _("Make Same Size"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/size_width_and_height.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu21->Append(menuItem);
	}
	m_editMenu->Append(IDM_ALIGN, _("&Align"), itemMenu21);
	wxMenu* itemMenu35 = new wxMenu;
	itemMenu35->Append(IDM_LAYER_UP, _("Layer Up\tCtrl+Up"), wxEmptyString, wxITEM_NORMAL);
	itemMenu35->Append(IDM_LAYER_DOWN, _("Layer Down\tCtrl+Down"), wxEmptyString, wxITEM_NORMAL);
	itemMenu35->Append(IDM_LAYER_IN, _("Layer In\tCtrl+Right"), wxEmptyString, wxITEM_NORMAL);
	itemMenu35->Append(IDM_LAYER_OUT, _("Layer Out\tCtrl+Left"), wxEmptyString, wxITEM_NORMAL);
	m_editMenu->Append(IDM_LAYER, _("&Layer"), itemMenu35);
	menuBar->Append(m_editMenu, _("&Edit"));
	wxMenu* itemMenu40 = new wxMenu;
	itemMenu40->Append(IDM_DIALOGS_ADD_DIALOG, _("&Add Dialog..."), wxEmptyString, wxITEM_NORMAL);
	itemMenu40->Append(IDM_DIALOGS_REMOVE_DIALOG, _("&Remove Dialog"), wxEmptyString, wxITEM_NORMAL);
	itemMenu40->Append(IDM_DIALOGS_RENAME_DIALOG, _("Re&name Dialog..."), wxEmptyString, wxITEM_NORMAL);
	itemMenu40->Append(IDM_DIALOGS_COMMENT_DIALOG, _("&Comment Dialog...\tAlt+C"), wxEmptyString, wxITEM_NORMAL);
	menuBar->Append(itemMenu40, _("&Dialogs"));
	wxMenu* itemMenu45 = new wxMenu;
	itemMenu45->Append(IDM_ATTRIBUTE_ADD, _("Add Attribute"), wxEmptyString, wxITEM_NORMAL);
	itemMenu45->Append(IDM_ATTRIBUTE_REMOVE, _("Remove Attribute"), wxEmptyString, wxITEM_NORMAL);
	menuBar->Append(itemMenu45, _("&Attribute"));
	wxMenu* itemMenu48 = new wxMenu;
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu48, wxID_ZOOM_IN, _("Zoom In\tCtrl++"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/zoom_in.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu48->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu48, wxID_ZOOM_OUT, _("Zoom Out\tCtrl+-"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/zoom_out.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu48->Append(menuItem);
	}
	{
		wxMenuItem* menuItem = new wxMenuItem(itemMenu48, wxID_ZOOM_100, _("Zoom 100\tCtrl+0"), wxEmptyString, wxITEM_NORMAL);
		wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/zoom_100.xpm")));
		menuItem->SetBitmap(bitmap);
		itemMenu48->Append(menuItem);
	}
	itemMenu48->AppendSeparator();
	itemMenu48->Append(IDM_VIEW_SET_BG, _("Set Background"), wxEmptyString, wxITEM_NORMAL);
	itemMenu48->Append(IDM_VIEW_CLEAR_BG, _("Clear Background"), wxEmptyString, wxITEM_NORMAL);
	menuBar->Append(itemMenu48, _("&View"));
	m_toolMenu = new wxMenu;
	m_toolMenu->Append(IDM_TOOLS_PREVIEW, _("&Preview...\tF5"), wxEmptyString, wxITEM_CHECK);
	wxMenu* itemMenu57 = new wxMenu;
	m_toolMenu->Append(IDM_TOOLS_LANGUAGES, _("&Language"), itemMenu57);
	m_toolMenu->Append(IDM_TOOLS_SHOW_SELECTION, _("Show &Selection\tCtrl+H"), wxEmptyString, wxITEM_CHECK);
	m_toolMenu->Check(IDM_TOOLS_SHOW_SELECTION, true);
	m_toolMenu->Append(IDM_TOOLS_CURRENT_USING_TEX, _("Show &Current Using Textures\tCtrl+U"), wxEmptyString, wxITEM_NORMAL);
	m_toolMenu->Append(IDM_TOOLS_DUPLICATE_WINDOWS, _("&Duplicate Windows..."), wxEmptyString, wxITEM_NORMAL);
	m_toolMenu->Append(IDM_TOOLS_RENAME_SELECTIONS, _("&Rename selections..."), wxEmptyString, wxITEM_NORMAL);
	m_toolMenu->AppendSeparator();
	m_toolMenu->Append(IDM_TOOLS_GEN_BINDING_CODE_CPP, _("Generate Binding Code C++...\tCtrl+G"), wxEmptyString, wxITEM_NORMAL);
	m_toolMenu->Append(IDM_TOOLS_GET_CONTROL_PATH, _("Get Control Path\tCtrl+Shift+G"), wxEmptyString, wxITEM_NORMAL);
	m_toolMenu->Append(IDM_TOOLS_GEN_CHARSET, _("Generate Charset..."), wxEmptyString, wxITEM_NORMAL);
	menuBar->Append(m_toolMenu, _("&Tools"));
	wxMenu* itemMenu66 = new wxMenu;
	itemMenu66->Append(wxID_ABOUT, _("&About\tF1"), wxEmptyString, wxITEM_NORMAL);
	menuBar->Append(itemMenu66, _("&Help"));
	itemFrame1->SetMenuBar(menuBar);

	m_toolBar = new wxToolBar( itemFrame1, IDT_MAIN_TOOLBAR, wxDefaultPosition, wxDefaultSize, wxTB_FLAT|wxTB_HORIZONTAL|wxTB_NODIVIDER );
	wxBitmap itemtool69Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_left.xpm")));
	wxBitmap itemtool69BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_LEFT, _("Align Left"), itemtool69Bitmap, itemtool69BitmapDisabled, wxITEM_NORMAL, _("Align Left"), wxEmptyString);
	wxBitmap itemtool70Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_center.xpm")));
	wxBitmap itemtool70BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_CENTER, _("Align Center"), itemtool70Bitmap, itemtool70BitmapDisabled, wxITEM_NORMAL, _("Align Center"), wxEmptyString);
	wxBitmap itemtool71Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_right.xpm")));
	wxBitmap itemtool71BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_RIGHT, _("Align Right"), itemtool71Bitmap, itemtool71BitmapDisabled, wxITEM_NORMAL, _("Align Right"), wxEmptyString);
	m_toolBar->AddSeparator();
	wxBitmap itemtool73Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_top.xpm")));
	wxBitmap itemtool73BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_TOP, _("Align Top"), itemtool73Bitmap, itemtool73BitmapDisabled, wxITEM_NORMAL, _("Align Top"), wxEmptyString);
	wxBitmap itemtool74Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_middle.xpm")));
	wxBitmap itemtool74BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_MIDDLE, _("Align Middle"), itemtool74Bitmap, itemtool74BitmapDisabled, wxITEM_NORMAL, _("Align Middle"), wxEmptyString);
	wxBitmap itemtool75Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/align_bottom.xpm")));
	wxBitmap itemtool75BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_BOTTOM, _("Align Bottom"), itemtool75Bitmap, itemtool75BitmapDisabled, wxITEM_NORMAL, _("Align Bottom"), wxEmptyString);
	m_toolBar->AddSeparator();
	wxBitmap itemtool77Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/gap_horizontal.xpm")));
	wxBitmap itemtool77BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_GAP_HORIZONTAL, _("Average Gap Horizontal"), itemtool77Bitmap, itemtool77BitmapDisabled, wxITEM_NORMAL, _("Average Gap Horizontal"), wxEmptyString);
	wxBitmap itemtool78Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/gap_vertical.xpm")));
	wxBitmap itemtool78BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_GAP_VERTICAL, _("Average Gap Vertical"), itemtool78Bitmap, itemtool78BitmapDisabled, wxITEM_NORMAL, _("Average Gap Vertical"), wxEmptyString);
	m_toolBar->AddSeparator();
	wxBitmap itemtool80Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/size_width.xpm")));
	wxBitmap itemtool80BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_SAME_WIDTH, _("Make Same Width"), itemtool80Bitmap, itemtool80BitmapDisabled, wxITEM_NORMAL, _("Make Same Width"), wxEmptyString);
	wxBitmap itemtool81Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/size_height.xpm")));
	wxBitmap itemtool81BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_SAME_HEIGHT, _("Make Same Height"), itemtool81Bitmap, itemtool81BitmapDisabled, wxITEM_NORMAL, _("Make Same Height"), wxEmptyString);
	wxBitmap itemtool82Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/size_width_and_height.xpm")));
	wxBitmap itemtool82BitmapDisabled;
	m_toolBar->AddTool(IDM_ALIGN_SAME_SIZE, _("Make Same Size"), itemtool82Bitmap, itemtool82BitmapDisabled, wxITEM_NORMAL, _("Make Same Size"), wxEmptyString);
	m_toolBar->AddSeparator();
	wxBitmap itemtool84Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/zoom_in.xpm")));
	wxBitmap itemtool84BitmapDisabled;
	m_toolBar->AddTool(wxID_ZOOM_IN, _("Zoom In"), itemtool84Bitmap, itemtool84BitmapDisabled, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
	wxBitmap itemtool85Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/zoom_out.xpm")));
	wxBitmap itemtool85BitmapDisabled;
	m_toolBar->AddTool(wxID_ZOOM_OUT, _("Zoom Out"), itemtool85Bitmap, itemtool85BitmapDisabled, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
	wxBitmap itemtool86Bitmap(itemFrame1->GetBitmapResource(wxT("../source/images/zoom_100.xpm")));
	wxBitmap itemtool86BitmapDisabled;
	m_toolBar->AddTool(wxID_ZOOM_100, _("Zoom 100"), itemtool86Bitmap, itemtool86BitmapDisabled, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
	m_toolBar->Realize();
	itemFrame1->GetAuiManager().AddPane(m_toolBar, wxAuiPaneInfo()
		.ToolbarPane().Name(_T("Pane1")).Top().Layer(10).CaptionVisible(false).CloseButton(false).DestroyOnClose(false).Resizable(false).Floatable(false).Movable(false).PaneBorder(false));

	GetAuiManager().Update();

////@end UiEditorV3Frame_Ui content construction
}


/*
 * Should we show tooltips?
 */

bool UiEditorV3Frame_Ui::ShowToolTips()
{
	return true;
}

/*
 * Get bitmap resources
 */

wxBitmap UiEditorV3Frame_Ui::GetBitmapResource( const wxString& name )
{
	// Bitmap retrieval
////@begin UiEditorV3Frame_Ui bitmap retrieval
	wxUnusedVar(name);
	if (name == _T("../source/images/align_left.xpm"))
	{
		wxBitmap bitmap(align_left_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/align_center.xpm"))
	{
		wxBitmap bitmap(align_center_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/align_right.xpm"))
	{
		wxBitmap bitmap(align_right_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/align_top.xpm"))
	{
		wxBitmap bitmap(align_top_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/align_middle.xpm"))
	{
		wxBitmap bitmap(align_middle_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/align_bottom.xpm"))
	{
		wxBitmap bitmap(align_bottom_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/gap_horizontal.xpm"))
	{
		wxBitmap bitmap(gap_horizontal_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/gap_vertical.xpm"))
	{
		wxBitmap bitmap(gap_vertical_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/size_width.xpm"))
	{
		wxBitmap bitmap(size_width_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/size_height.xpm"))
	{
		wxBitmap bitmap(size_height_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/size_width_and_height.xpm"))
	{
		wxBitmap bitmap(size_width_and_height_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/zoom_in.xpm"))
	{
		wxBitmap bitmap(zoom_in_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/zoom_out.xpm"))
	{
		wxBitmap bitmap(zoom_out_xpm);
		return bitmap;
	}
	else if (name == _T("../source/images/zoom_100.xpm"))
	{
		wxBitmap bitmap(zoom_fix_xpm);
		return bitmap;
	}
	return wxNullBitmap;
////@end UiEditorV3Frame_Ui bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon UiEditorV3Frame_Ui::GetIconResource( const wxString& name )
{
	// Icon retrieval
////@begin UiEditorV3Frame_Ui icon retrieval
	wxUnusedVar(name);
	return wxNullIcon;
////@end UiEditorV3Frame_Ui icon retrieval
}
